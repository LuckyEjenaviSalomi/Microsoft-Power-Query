(n_sequence as number, optional index_col_name as any, optional fibonaci_num_col_name as any)=>
let
    Source = List.Generate(
        ()=> [x = 1, y = 1, count = 1], //Initialized values
        each [count] <= n_sequence, //condition to stop iteration
        each [count = [count] + 1, x = [y], y = [x] + x], //Next values - x = previous y, y = previous x + new x
        each [y] //values to return to the list
    ),
    // Convert the generated list to a table
    Converted_to_Table = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),

    fibonaci_num_col_name = if fibonaci_num_col_name = null then "Fibonacci Numbers" else fibonaci_num_col_name,
    index_col_name = if index_col_name = null then "Index" else index_col_name,

    RenamedColumns = Table.RenameColumns(Converted_to_Table,{{"Column1", fibonaci_num_col_name}}),
    ChangedType = Table.TransformColumnTypes(RenamedColumns,{{fibonaci_num_col_name, Int64.Type}}),
    AddedIndex = Table.AddIndexColumn(ChangedType, index_col_name, 1, 1, Int64.Type),
    ReorderedColumns = Table.ReorderColumns(AddedIndex,{index_col_name, fibonaci_num_col_name})
in
    ReorderedColumns
